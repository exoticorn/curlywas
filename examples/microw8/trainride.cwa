import "env.memory" memory(2);

export fn tic(time: i32) {
  let i: i32;
  let lazy t = time as f32 / 1000 as f32;
  loop pixels {
    let lazy x = (i % 320 - 160) as f32;
    let lazy y = (i / 320) as f32 - 120.5;
    let lazy z = t + 20 as f32 / sqrt(x*x + y*y);
    let lazy z_int = z as i32;
    let lazy q = select(z_int % 9 >= 6, z, (z_int - z_int % 9 + 6) as f32);
    let lazy w = 9 as f32 / y + t;
    let lazy s = q - t;
    let lazy m = x * s / 50 as f32;

    i?120 = select(y > 0 as f32 & w < q,
              select(abs(x * (w - t)) < 9 as f32, 15, 7) - w as i32 % 2,
              select(y * s > -99 as f32 / (m * m + 1 as f32),
                select(q == z, z_int % 2, 3),
                12 + (y / 23 as f32) as i32
              )
            ) * 16;
    branch_if (i := i + 1) < 320*240: pixels;
  }
}
